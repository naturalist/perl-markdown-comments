#!/usr/bin/env perl

use strict;
use warnings;

use Module::Path 'module_path';
use Getopt::Long;
use Markdown::Comments;

my $help     = 0;
my $path     = $ARGV[0] // help();
my $format   = 'Text';
my $params   = '';
my $args     = '';
my $encoding = 'UTF-8';

GetOptions(
    "format=s"   => \$format,
    "encoding=s" => \$encoding,
    "help"       => \$help,
);

if ( !defined $ARGV[0] || $help ) {
    help();
    exit(1);
}

my $text = load_file($path);
print fmt( $format, $text );

#=========================================================================
# !mdd code
#
# ### load\_file($path\_or\_module)
#
# If the parameter looks like a Perl module name it will try to locate it.
# Otherwise, it will look for a file name.
#
# __Input__
#
# A scalar containing a path or module name
#
# __Output__
#
# The contents of the located file, or err if not found
#
sub load_file {
    my $path = shift;

    if ( $path =~ /\:/ || !-e $path ) {
        $path = module_path($path);
    }

    if ( !$path || !-e $path ) {
        print "Not found!";
        exit(1);
    }

    open my $handle, "<:encoding($encoding)", $path;
    my $text = do { local $/ = undef; <$handle> };
    close $handle;

    return $text;
}


#=========================================================================
# !mdd code
# ### fmt( $type, $text, %args ) 
#
# Returns formatted text according to the _$type parameter.
#
# __Input__:
#
# - $type - The Markdown::Comments::Format subclass responsible for formatting the markdown text.
# - $text - The raw text to parse and format.
# - %args - Arguments to be passed to the formatting class.
#
# __Output__:
#
# - Formatted text
#
sub fmt {
    my ( $type, $text, %args ) = @_;

    local $@;
    my $class;
    eval { $class = load_class( $type, 'Markdown::Comments::Format' ) };

    # !mdd code
    # Exit with error if the requested formatting class was not found
    if ($@) {
        print "Module Markdown::Comments::Format::$type is not installed";
        exit(1);
    }

    my $mc = Markdown::Comments->parse($text);
    return $class->new( mc => $mc )->output( %args );
}

#=========================================================================
# !mdd code
# ### help()
#
# Reads the help contained in the \_\_DATA\_\_ section
# of this very file and displays it using Markdown::Comments::Format
# Exits with status 1
#
sub help {
    my $text = do { local $/ = undef; <DATA> };
    print fmt( 'Text', $text );
    exit(1);
}

#=========================================================================
# !mdd code
# load_class( $class, $prefix )
#
# This sub is jacked straight from Plack::Util. Feel free to Github me if 
# you have a better solution.
#
# Attempt to require a Perl module. As an optional second parameter you may 
# provide a namespace.
#
# __Input__
#
# - $class - Name of the class to load
# - $prefix - Namespace
#
# __Output__
#
# - Full class name of the successfuly required module.
#
sub load_class {
    my ( $class, $prefix ) = @_;

    if ($prefix) {
        unless ( $class =~ s/^\+// || $class =~ /^$prefix/ ) {
            $class = "$prefix\::$class";
        }
    }

    my $file = $class;
    $file =~ s!::!/!g;
    require "$file.pm";    ## no critic

    return $class;
}

=pod

=head1 Create documentation from markdown code in Perl comments

Please run C<mdd --help> for help

=head1

=cut

__DATA__
# !mdd help
#
# # Extract markdown documentation comments from Perl source files
#
# ## Usage
#
# mdd [options] <filename|module>
#
# ## Options
#
# - --help - this lovely help message.
# - --encoding - the source file encoding. Default is utf-8.
# - --format - the format subclass to use when processing the extracted markdown text.
#
# ## Source
#
# Feel free to contribute to the Github repo:
# https://github.com/naturalist/perl-markdown-comments
#
# ## Author
#
# Stefan G. \<minimal@cpan.org\>

#vim:syntax=perl

